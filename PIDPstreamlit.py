import streamlit as st
import pandas as pd

# --- Configura√ß√µes Iniciais da P√°gina ---
st.set_page_config(
    page_title="Sintonia PID: ZN (Acesso Web)",
    layout="wide",
)

st.title("üîß Sintonia de Malhas PID - M√©todo Ziegler-Nichols (Web)")
st.markdown("Acesse de qualquer dispositivo para calcular os par√¢metros de sintonia.")

# --- Estrutura de Abas ---
tab_sintonia, tab_ajuda = st.tabs(["‚öôÔ∏è Sintonia (C√°lculo)", "‚ÑπÔ∏è Ajuda / Como Usar"])

# ===================================================================
# CONTE√öDO DA ABA 1: SINTONIA (C√°lculo)
# ===================================================================

with tab_sintonia:
    st.header("1. Coleta de Dados do Processo (Curva de Rea√ß√£o)")
    
    st.info("Siga as instru√ß√µes na aba 'Ajuda' para coletar os valores de ŒîMV, ŒîPV, L e T.")

    # Colunas para Inputs
    col_mv, col_pv = st.columns(2)

    with col_mv:
        st.subheader("Entrada (A√ß√£o de Controle)")
        delta_mv = st.number_input(
            "Varia√ß√£o na Sa√≠da do Controlador (ŒîMV, %):",
            min_value=0.01,
            value=10.0,
            step=1.0,
            format="%f",
            key="delta_mv_web"
        )

    with col_pv:
        st.subheader("Sa√≠da (Vari√°vel de Processo)")
        delta_pv = st.number_input(
            "Varia√ß√£o Final da PV (ŒîPV):",
            min_value=0.01,
            value=5.0,
            step=0.1,
            format="%f",
            key="delta_pv_web"
        )

    st.divider()

    st.header("2. Identifica√ß√£o dos Par√¢metros do Modelo")

    col_l, col_t = st.columns(2)

    with col_l:
        L = st.number_input(
            "Tempo Morto / Atraso (L, em Segundos):",
            min_value=0.01,
            value=5.0,
            step=0.1,
            format="%f",
            key="L_web"
        )

    with col_t:
        T = st.number_input(
            "Constante de Tempo (T, em Segundos):",
            min_value=0.01,
            value=20.0,
            step=0.1,
            format="%f",
            key="T_web"
        )
    
    st.divider()
    
    # Bot√£o e L√≥gica de C√°lculo
    if st.button("Calcular Par√¢metros ZIEGLER-NICHOLS", type="primary"):
        if delta_pv <= 0 or delta_mv <= 0 or L <= 0 or T <= 0:
            st.error("üö® Todos os valores de ŒîMV, ŒîPV, L e T devem ser maiores que zero.")
        else:
            try:
                # 1. C√°lculo do Ganho do Processo (K)
                K = delta_pv / delta_mv
                
                st.header("‚úÖ 3. Resultados da Sintonia")
                st.markdown(f"### Par√¢metros do Modelo FOPTD")
                st.markdown(f"**Ganho do Processo (K):** `{K:.4f}`")
                st.markdown(f"**Tempo Morto (L):** `{L:.2f}` s")
                st.markdown(f"**Constante de Tempo (T):** `{T:.2f}` s")
                
                st.subheader("Par√¢metros do Controlador (Tabela de Ziegler-Nichols)")

                # 2. C√°lculo dos Par√¢metros PID por ZN
                Kp_p = T / (K * L)
                Kp_pi = 0.9 * T / (K * L)
                Ti_pi = 3.33 * L
                Kp_pid = 1.2 * T / (K * L)
                Ti_pid = 2.0 * L
                Td_pid = 0.5 * L
                
                # 3. Exibi√ß√£o dos Resultados em Tabela
                dados = {
                    "Controlador": ["P (Proporcional)", "PI (Prop.-Integral)", "PID (Prop.-Int.-Der.)"],
                    "Kp (Ganho Proporcional)": [f"{Kp_p:.4f}", f"{Kp_pi:.4f}", f"{Kp_pid:.4f}"],
                    "Ti (Tempo Integral em Segundos)": ["-", f"{Ti_pi:.2f}", f"{Ti_pid:.2f}"],
                    "Td (Tempo Derivativo em Segundos)": ["-", "-", f"{Td_pid:.2f}"],
                }
                
                df_resultados = pd.DataFrame(dados)
                st.dataframe(df_resultados, use_container_width=True, hide_index=True)
                
                st.warning("""
                **NOTA SOBRE UNIDADES:** O controlador pode usar diferentes formatos. Verifique o manual para a convers√£o:
                * **Ki (Ganho Integral):** Kp / Ti
                * **Kd (Ganho Derivativo):** Kp * Td
                """)
                
            except Exception as e:
                st.error(f"Ocorreu um erro no c√°lculo: {e}")

# ===================================================================
# CONTE√öDO DA ABA 2: AJUDA / COMO USAR
# ===================================================================
with tab_ajuda:
    st.header("üìù Procedimento Ziegler-Nichols (Malha Aberta)")
    
    st.subheader("Passo 1: Prepara√ß√£o do Teste")
    st.markdown("""
    1.  **Modo Manual:** Coloque o seu controlador (CLP, etc.) em modo **MANUAL**.
    2.  **Estabiliza√ß√£o:** Mantenha a sa√≠da (**MV**) est√°vel e aguarde a Vari√°vel de Processo (**PV**) tamb√©m estabilizar.
    """)

    st.subheader("Passo 2: Execu√ß√£o do Degrau e Coleta de Varia√ß√µes")
    st.markdown("""
    1.  **Aplique o Degrau:** Mude a **MV** rapidamente (ex: de 40% para 50%).
    2.  **ŒîMV (Varia√ß√£o da MV):** √â a diferen√ßa entre o valor final e inicial da MV (ex: 10%). Insira este valor no campo **ŒîMV**.
    3.  **ŒîPV (Varia√ß√£o da PV):** Aguarde a PV se estabilizar. Me√ßa a varia√ß√£o total na PV. Insira este valor no campo **ŒîPV**.
    """)
    
    st.subheader("Passo 3: Medi√ß√£o dos Par√¢metros L e T (Curva)")
    st.image("https://i.imgur.com/zV4Xn6i.png", caption="Curva de Rea√ß√£o e Par√¢metros L e T (Fonte: Adapta√ß√£o de literatura de controle)")
    st.markdown("""
    1.  **Tempo Morto (L):** Me√ßa o tempo (em segundos) desde que o degrau foi aplicado at√© o **in√≠cio da rea√ß√£o** da PV. Insira no campo **L**.
    2.  **Constante de Tempo (T):** Calcule a inclina√ß√£o da tangente no ponto de inflex√£o. O valor de **T** √© o tempo entre a intersec√ß√£o da tangente com o valor inicial e a intersec√ß√£o com o valor final da PV.
    """)

# --- Fim do Arquivo ---